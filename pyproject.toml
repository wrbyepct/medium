[tool.poetry]
name = "medium"
version = "0.1.0"
description = ""
authors = ["Furthermore <wrbyepcr11@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
django-split-settings = "^1.3.1"
psycopg2 = "^2.9.9"
django = "^5.0.6"
djangorestframework = "^3.15.1"
gunicorn = "^22.0.0"
drf-spectacular = "^0.27.2"
djangorestframework-simplejwt = "^5.3.1"
django-cors-headers = "^4.4.0"
pillow = "^10.4.0"
django-filter = "^24.2"
whitenoise = "^6.7.0"
colorlog = "^6.8.2"
django-mptt = "^0.16.0"
django-autoslug = "^1.9.9"
django-countries = "^7.6.1"
django-phonenumber-field = "^8.0.0"
phonenumbers = "^8.13.44"
argon2-cffi = "^23.1.0"
pytz = "^2024.1"
django-taggit = "^6.0.0"
django-environ = "^0.11.2"
celery = "^5.4.0"
redis = "^5.0.8"
flower = "^2.0.1"
django-celery-email = "^3.0.0"
django-stubs = "^5.1.1"
django-allauth = "^65.2.0"
dj-rest-auth = "^7.0.0"
requests = "^2.32.3"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.1"
pytest-html = "^4.1.1"
pytest = "^8.2.2"
pytest-xdist = "^3.6.1"
pytest-django = "^4.8.0"
pytest-cov = "^5.0.0"
selectolax = "^0.3.21"
pytest-factoryboy = "^2.7.0"
pytest-sugar = "^1.0.0"
pygments = "^2.18.0"
sqlparse = "^0.5.1"
ruff = "^0.6.3"
commitizen = "^3.29.0"
pytest-dotenv = "^0.5.2"
watchfiles = "^0.24.0"


[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["ALL"]
fixable = ["ALL"]
ignore = [
    "ANN201", # Check return type annotation
    "ANN003", # Missing type annotation for `**extra_fields`
    "D106", # Missing docstring in public nested class
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
    "FIX002", # Line contains TODO, consider resolving the issue
    "E501", # line too long
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "G004", # Logging statement uses f-string
    "TD", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "PGH003" # Use specified rules
    
]


[tool.ruff.lint.mccabe]
# Check mccabe. 
# Each additional decision point (e.g., if, elif, else, for, while, try, except, etc.) 
# increases the complexity score by 1.
max-complexity = 8 

[tool.ruff.lint.per-file-ignores]
"core/settings/*.py" = ["F821", "PGH003"]
"local/*.py" = ["F821"]
"**/tests/**/*.py" = [
    "S101", 
    "INP001", 
    "ANN201", 
    "ANN001", 
    "D",
    "PT006" #  Wrong type passed to first argument of `@pytest.mark.parametrize`; expected `tuple`
]
"**/migrations/**/*.py" = [
    "INP001", 
    "D", # Missing docstring in public module

]
"**/apps.py" = [
    "INP001", 
    "D", # Missing docstring in public module

]
"**/__init__.py" = [
    "INP001", 
    "D", # Missing docstring in public module

]
"local/" = ["INP001"]
"core/manage.py" = ["ALL"]

[tool.pytest.ini_options]
env_files = [".envs/.local/.django", ".envs/.local/.postgres"]
django_find_project = false
pythonpath = "."
DJANGO_SETTINGS_MODULE = "core.settings"
python_files = "test_*.py"
testpaths = ["core/tests"]
filterwarnings = ["ignore::DeprecationWarning", "ignore::pytest.PytestCacheWarning"]
markers = [
    "model: tests for model", 
    "model_structure: tests for model structure."
]


[tool.coverage.run]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "core/settings/*",
    "*/conftest.py",
    "core/manage.py"
]


[tool.commitizen]
name = "cz_conventional_commits"
version = "2.4.0"  
update_changelog_on_bump = true
tag_format = "$version"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
